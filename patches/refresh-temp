Bottom: 093a2d4d1cc1051ded0bb2e4f5d6780359f22653
Top:    086ca3722f3d976eace2df4dec717bea2f3aab52
Author: Alexey Lyashkov <shadow@Alexeys-MacBook-Pro.local>
Date:   2016-01-18 08:17:08 +0300

Refresh of sock-resource.patch

---

diff --git a/ib-sock-int.h b/ib-sock-int.h
index 09de381..4e9988d 100644
--- a/ib-sock-int.h
+++ b/ib-sock-int.h
@@ -38,6 +38,8 @@ struct IB_SOCK {
 
 	unsigned long		is_flags;
 
+	struct ib_sock_mem	is_mem;
+
 	/* pre-accepted sockets */
 	spinlock_t		is_child_lock;
 	struct list_head	is_child;
diff --git a/ib-sock-mem.c b/ib-sock-mem.c
index 54d8230..4976a3f 100644
--- a/ib-sock-mem.c
+++ b/ib-sock-mem.c
@@ -38,7 +38,6 @@ static void ib_sock_mem_fini_common(struct IB_SOCK *sock)
 
 int ib_sock_mem_init(struct IB_SOCK *sock)
 {
-	int i;
 	int ret;
 
 	ret = ib_sock_mem_init_common(sock);
diff --git a/ib-sock.c b/ib-sock.c
index c79a279..ea0a8e7 100644
--- a/ib-sock.c
+++ b/ib-sock.c
@@ -1,8 +1,26 @@
 #include "ib-sock.h"
 #include "ib-sock-int.h"
 
-struct IB_SOCK *__ib_socket_create(struct rdma_cm_id *cm_id);
+static struct IB_SOCK *__ib_socket_create(struct rdma_cm_id *cm_id);
 
+/* allocate a sort of resources for socket, such as 
+ * 1) memory region to map a requests
+ */
+static int ib_sock_resource_alloc(struct IB_SOCK *sock)
+{
+	int ret;
+
+	ret = ib_sock_mem_init(sock);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static void ib_sock_resource_free(struct IB_SOCK *sock)
+{
+	ib_sock_mem_fini(sock);
+}
 
 static int
 cm_client_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
@@ -59,6 +77,11 @@ cm_client_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 			break;
 		}
 
+		/* connect response done, hello verified - allocate resources and go */
+		ret = ib_sock_resource_alloc(sock);
+		if (ret < 0)
+			break;
+
 		sock_event_set(sock, POLLOUT);
 		break;
 	}
@@ -71,6 +94,13 @@ cm_client_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 	return ret;
 }
 /**************************************************************************************/
+static void server_error_accept(struct IB_SOCK *sock)
+{
+	/* will destroy after exit from event cb */
+	sock->is_id = NULL;
+	ib_socket_destroy(sock);
+}
+
 static int
 cm_server_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 {
@@ -100,6 +130,12 @@ cm_server_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 			break;
 		}
 
+		ret = ib_sock_resource_alloc(sock);
+		if (ret < 0) {
+			server_error_accept(sock);
+			return ret;
+		}
+
 		memset(&hello_ack, 0, sizeof hello_ack);
 		hello_ack.magic = IB_HELLO_MAGIC;
 
@@ -112,9 +148,7 @@ cm_server_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 
 		ret = rdma_accept(sock->is_id, &conn_param);
 		if (ret < 0) {
-			/* will destroy after exit from event cb */
-			sock->is_id = NULL;
-			ib_socket_destroy(sock);
+			server_error_accept(sock);
 			return ret;
 		}
