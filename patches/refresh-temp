Bottom: 997bf463afe4a636d1d3adf56374bdd0b13692d8
Top:    8a283712a33d06509defa1d2a4fff8edd402f8bc
Author: Alexey Lyashkov <shadow@Alexeys-MacBook-Pro.local>
Date:   2016-01-15 00:37:07 +0300

Refresh of cli.patch

---

diff --git a/Makefile b/Makefile
index 21ac7e7..590400a 100644
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,6 @@
 ifneq ($(KERNELRELEASE),)
     obj-m	:= netsrv.o netcli.o
-    obj_ib-y	:= ib-sock.o 
+    obj_ib-y	:= ib-sock.o ib-sock-util.o
     netsrv-objs	:= srv.o $(obj_ib-y)
     netcli-objs	:= cli.o $(obj_ib-y)
 else
diff --git a/cli.c b/cli.c
index 8eb3a7b..b6deb50 100644
--- a/cli.c
+++ b/cli.c
@@ -13,6 +13,7 @@ cli_init(void)
 	struct IB_SOCK *sock;
 	unsigned a,b,c,d;
 	struct sockaddr_in  dstaddr;
+	unsigned long event;
 	int err;
 
 	/* numeric IP? */
@@ -35,7 +36,9 @@ cli_init(void)
 		printk("error connect \n");
 		goto exit;
 	}
-	ssleep(10);
+	event = ib_socket_poll(sock);
+	printk("Event hit %lx\n", event);
+
 	ib_socket_disconnect(sock);
 exit:
 	ib_socket_destroy(sock);
diff --git a/ib-sock-int.h b/ib-sock-int.h
index fc1fe25..176b0c9 100644
--- a/ib-sock-int.h
+++ b/ib-sock-int.h
@@ -12,10 +12,16 @@
 #define IB_ADDR_TIMEOUT 100
 #define IB_ROUTE_TIMEOUT 100
 
+enum ib_sock_flags {
+	SOCK_CONNECTED	= 1 << 0,
+	SOCK_ERROR	= 1 << 1,
+};
+
 struct IB_SOCK {
 	/* primary OFED stack ID */
 	struct rdma_cm_id	*is_id;
 
+	unsigned long		is_flags;
 	/* transfer related parts */
 	/* completion events */
 	struct ib_cq		*is_cq;
@@ -24,8 +30,17 @@ struct IB_SOCK {
 
 	/* event mask */
 	unsigned long		is_events;
+	wait_queue_head_t	is_events_wait;
 };
 
+static inline
+void sock_event_set(struct IB_SOCK *sock, unsigned int event)
+{
+	sock->is_events |= event;
+	wake_up(&sock->is_events_wait);
+}
+
+
 /* messages on wire */
 #define WIRE_ATTR	__attribute__((packed))
 
@@ -35,4 +50,11 @@ struct ib_hello {
 	__u32	magic;
 } WIRE_ATTR;
 
+
+
+/* util.c */
+const char *ib_event_type_str(enum ib_event_type ev_type);
+const char *wr_status_str(enum ib_wc_status status);
+char *cm_event_type_str(enum rdma_cm_event_type ev_type);
+
 #endif
diff --git a/ib-sock.c b/ib-sock.c
index 6b0ab20..24ebe3b 100644
--- a/ib-sock.c
+++ b/ib-sock.c
@@ -56,7 +56,7 @@ cm_client_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 			ret = -EPROTO;
 			break;
 		}
-
+		sock_event_set(sock, POLLOUT);
 		break;
 	}
 	default:
@@ -71,10 +71,12 @@ cm_client_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 
 static int cm_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 {
+	struct IB_SOCK *sock = cmid->context;
 	int ret = 0;
 
-	printk("CM event %d status %d conn %p id %p\n",
-		event->event, event->status, cmid->context, cmid);
+	printk("CM event %s status %d conn %p id %p\n",
+		cm_event_type_str(event->event), event->status, cmid->context,
+		cmid);
 
 	switch (event->event) {
 	/* client related events */
@@ -93,6 +95,7 @@ static int cm_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 	case RDMA_CM_EVENT_CONNECT_ERROR:
 	case RDMA_CM_EVENT_UNREACHABLE:
 	case RDMA_CM_EVENT_REJECTED:
+		sock->is_flags |= SOCK_ERROR;
 		break;
 	/* some hard errors to abort connection */
 	case RDMA_CM_EVENT_DISCONNECTED:
@@ -103,6 +106,11 @@ static int cm_handler(struct rdma_cm_id *cmid, struct rdma_cm_event *event)
 		printk("Unexpected RDMA CM event (%d)\n", event->event);
 		break;
 	}
+
+	if (ret < 0) {
+		sock->is_flags |= SOCK_ERROR;
+		sock_event_set(sock, POLLERR);
+	}
 	return ret;
 }
 
@@ -174,10 +182,33 @@ void ib_socket_disconnect(struct IB_SOCK *sock)
 	 */
 
 	if ((sock->is_flags & SOCK_CONNECTED) == 0)
-		return 0;
+		return;
 
 	err = rdma_disconnect(sock->is_id);
 	if (err)
 		printk("Failed to disconnect, conn: 0x%p err %d\n",
 			 sock,err);
 }
+
+static unsigned long __take_event(struct IB_SOCK *sock, unsigned long *e)
+{
+	unsigned long events;
+	
+	events = xchg(&sock->is_events, 0);
+	if (events != 0)
+		*e = events;
+
+	return events;
+}
+
+unsigned long ib_socket_poll(struct IB_SOCK *sock)
+{
+	unsigned long mask = 0;
+
+	wait_event(sock->is_events_wait, __take_event(sock, &mask));
+
+	if (sock->is_flags & SOCK_ERROR)
+		mask |= POLLERR;
+
+	return mask;
+}
diff --git a/ib-sock.h b/ib-sock.h
index 103534d..533e991 100644
--- a/ib-sock.h
+++ b/ib-sock.h
@@ -23,6 +23,6 @@ int ib_socket_connect(struct IB_SOCK *sock, struct sockaddr_in  *dstaddr);
 void ib_socket_disconnect(struct IB_SOCK *sock);
 
 /* sleep to wait poll event from socket */
-unsigned long ib_socket_pool(struct IB_SOCK *sock);
+unsigned long ib_socket_poll(struct IB_SOCK *sock);
 
 #endif
\ No newline at end of file
