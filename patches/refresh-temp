Bottom: d9d06dd2c8c4a1f327d26ea00bfcac750a011f8c
Top:    6954a95a9126fd426454b814658e021553896e51
Author: Alexey Lyashkov <shadow@Alexeys-MacBook-Pro.local>
Date:   2016-01-20 07:35:15 +0300

Refresh of control-msg.patch

---

diff --git a/Makefile b/Makefile
index 313194f..08d99d2 100644
--- a/Makefile
+++ b/Makefile
@@ -1,7 +1,7 @@
 ifneq ($(KERNELRELEASE),)
     obj-m	:= netsrv.o netcli.o
     obj_ib-y	:= ib-sock.o ib-sock-util.o
-    obj_ib-y	+= ib-sock-mem.o
+    obj_ib-y	+= ib-sock-mem.o ib-sock-ctl.o
     netsrv-objs	:= srv.o $(obj_ib-y)
     netcli-objs	:= cli.o $(obj_ib-y)
 else
diff --git a/ib-sock-int.h b/ib-sock-int.h
index c6bcecf..71fc6cf 100644
--- a/ib-sock-int.h
+++ b/ib-sock-int.h
@@ -16,7 +16,8 @@
 #define IB_MAX_PARALLEL	 1
 
 /* 1 RX + 1 TX in flight */
-#define IB_CQ_EVENTS_MAX (IB_MAX_PARALLEL) * 2
+#define IB_MAX_CTL_MSG	(IB_MAX_PARALLEL * 2)
+#define IB_CQ_EVENTS_MAX (IB_MAX_PARALLEL * 2)
 
 enum ib_sock_flags {
 	SOCK_CONNECTED	= 1 << 0,
@@ -52,6 +53,13 @@ struct IB_SOCK {
 	/* queue pair to communicate between nodes */
 	struct ib_qp		*is_qp;
 
+	/* control messages */
+	/* IDLE <> active protection  */
+	spinlock_t		is_ctl_lock;
+	struct list_head	is_ctl_idle_list;
+	struct list_head	is_ctl_active_list;
+	wait_queue_head_t	is_ctl_waitq;
+
 	/* pre-accepted sockets */
 	spinlock_t		is_child_lock;
 	struct list_head	is_child;
@@ -68,7 +76,7 @@ void sock_event_set(struct IB_SOCK *sock, unsigned int event)
 	wake_up(&sock->is_events_wait);
 }
 
-/* messages on wire */
+/**************************** messages on wire ********************/
 #define WIRE_ATTR	__attribute__((packed))
 
 #define IB_HELLO_MAGIC 0x9012
@@ -77,6 +85,29 @@ struct ib_hello {
 	__u32	magic;
 } WIRE_ATTR;
 
+/************* ib sock control protocol ***************************/
+#define IB_CTL_MSG_MAGIC	0x87154
+
+struct ib_sock_wire_msg {
+	uint32_t	sww_magic;
+} WIRE_ATTR;
+
+struct ib_sock_ctl {
+	struct list_head	iscm_link;
+
+	struct ib_sge		iscm_sge;
+
+	/* used to describe an incomming rdma transfer,
+	 * must be first WR in sending chain */
+	struct ib_sock_wire_msg	iscm_msg;
+};
+/************* ib sock control protocol ***************************/
+/* ctl-msg.c */
+/* init queue and post sort of rx buffer to wait incomming data */
+int ib_sock_ctl_msg_init(struct IB_SOCK *sock);
+void ib_sock_ctl_msg_fini(struct IB_SOCK *sock);
+/* take control message to send an outgoning buffer */
+struct ib_sock_ctl *ib_sock_ctl_idle_take(struct IB_SOCK *sock);
 
 /* mem.c */
 /* init function responsible to fill an number WR / SGE per socket*/
diff --git a/ib-sock.h b/ib-sock.h
index 0a2f9a9..c74c3df 100644
--- a/ib-sock.h
+++ b/ib-sock.h
@@ -28,5 +28,7 @@ unsigned long ib_socket_poll(struct IB_SOCK *sock);
 int ib_socket_bind(struct IB_SOCK *sock, uint32_t addr, unsigned port);
 struct IB_SOCK *ib_socket_accept(struct IB_SOCK *parent);
 
+/* send some amount data over wire */
+size_t ib_socket_write(struct IB_SOCK *sock, void *buf, size_t size);
 
 #endif
\ No newline at end of file
